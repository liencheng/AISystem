drop table if exists t_FinalResult;

--[LOOPTEMPLATE {0} 3]--
drop table if exists t_RedEquipDropBossInfo{0};
create table t_RedEquipDropBossInfo{0}(Id integer, Name text);
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId1, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId1 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId2, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId2 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId3, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId3 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId4, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId4 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId5, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId5 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId6, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId6 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId7, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId7 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId8, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId8 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId9, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId9 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId10, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId10 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId11, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId11 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId12, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId12 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId13, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId13 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId14, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId14 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId15, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId15 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId16, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId16 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId17, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId17 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId18, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId18 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId19, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId19 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId20, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId20 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId21, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId21 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId22, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId22 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId23, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId23 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId24, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId24 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId25, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId25 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId26, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId26 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId27, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId27 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId28, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId28 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId29, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId29 != -1; 
insert into t_RedEquipDropBossInfo{0}(Id, Name) select r.BossDataId30, r.Desc from RedEquipDropBossInfo as r where r.Id == {0} and r.BossDataId30 != -1; 
--[LOOPTEMPLATE]--

--[LOOPTEMPLATE {0} 1]--
drop table if exists t_RareGlobalDropBossInfo{0};
create table t_RareGlobalDropBossInfo{0}(Id integer, Name text);
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId1, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId1 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId2, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId2 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId3, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId3 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId4, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId4 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId5, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId5 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId6, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId6 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId7, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId7 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId8, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId8 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId9, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId9 != -1; 
insert into t_RareGlobalDropBossInfo{0}(Id, Name) select r.BossDataId10, r.Desc from RareGlobalDropBossInfo as r where r.Id == {0} and r.BossDataId10 != -1; 
--[LOOPTEMPLATE]--

drop table if exists t_NpcAttrDrop;
create table t_NpcAttrDrop(Id integer, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, REORRG text, DropListId integer, RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_NpcAttrDrop (Id, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, n.Name, n.Level, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, case when n.Id in (select Id from t_RedEquipDropBossInfo1) then "RedEquip 1" when n.Id in (select Id from t_RedEquipDropBossInfo2) then "RedEquip 2" when n.Id in (select Id from t_RedEquipDropBossInfo3) then "RedEquip 3" when n.Id in (select Id from t_RareGlobalDropBossInfo1) then "RareGlobal 1" else "无" end, n.DropItemNormalId, d.CommonDropIndex1, d.CommonDropIndex2, d.CommonDropIndex3, d.CommonDropIndex4, d.CommonDropIndex5, d.CommonDropIndex6, d.CommonDropIndex7, d.CommonDropIndex8, d.CommonDropIndex9, d.CommonDropIndex10, d.CommonDropIndex11, d.CommonDropIndex12, d.CommonDropIndex13, d.CommonDropIndex14, d.CommonDropIndex15, d.CommonDropIndex16 from NpcAttr as n join DropList as d on n.DropItemNormalId == d.Id;
insert into t_NpcAttrDrop (Id, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, n.Name, n.Level, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, case when n.Id in (select Id from t_RedEquipDropBossInfo1) then "RedEquip 1" when n.Id in (select Id from t_RedEquipDropBossInfo2) then "RedEquip 2" when n.Id in (select Id from t_RedEquipDropBossInfo3) then "RedEquip 3" when n.Id in (select Id from t_RareGlobalDropBossInfo1) then "RareGlobal 1" else "无" end, n.DropItemNormalId, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 from NpcAttr as n where not exists(select * from t_NpcAttrDrop where n.Id == t_NpcAttrDrop.Id);

drop table if exists t_NpcAttrDropReset;
create table t_NpcAttrDropReset(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_NpcAttrDropReset (Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, "Id是NPCId, 普通掉落", n.Name, n.NpcLevel, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, c.Desc, n.REORRG, n.DropListId, n.RecursionDropId1, n.RecursionDropId2, n.RecursionDropId3, n.RecursionDropId4, n.RecursionDropId5, n.RecursionDropId6, n.RecursionDropId7, n.RecursionDropId8, n.RecursionDropId9, n.RecursionDropId10, n.RecursionDropId11, n.RecursionDropId12, n.RecursionDropId13, n.RecursionDropId14, n.RecursionDropId15, n.RecursionDropId16 from t_NpcAttrDrop as n join CountResetInfo as c on n.DropResetCountId == c.Id;
insert into t_NpcAttrDropReset (Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, "Id是NPCId, 普通掉落", n.Name, n.NpcLevel, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, "无", n.REORRG, n.DropListId, n.RecursionDropId1, n.RecursionDropId2, n.RecursionDropId3, n.RecursionDropId4, n.RecursionDropId5, n.RecursionDropId6, n.RecursionDropId7, n.RecursionDropId8, n.RecursionDropId9, n.RecursionDropId10, n.RecursionDropId11, n.RecursionDropId12, n.RecursionDropId13, n.RecursionDropId14, n.RecursionDropId15, n.RecursionDropId16 from t_NpcAttrDrop as n where not exists(select * from t_NpcAttrDropReset where n.Id == t_NpcAttrDropReset.Id);

drop table if exists t_NpcAttrDropResetFinal;
create table t_NpcAttrDropResetFinal(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_NpcAttrDropResetFinal select * from t_NpcAttrDropReset order by t_NpcAttrDropReset.Id;

drop table if exists t_NpcAttrSpecDrop;
create table t_NpcAttrSpecDrop(Id integer, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, REORRG text, DropListId integer, RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_NpcAttrSpecDrop (Id, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, n.Name, n.Level, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, case when n.Id in (select Id from t_RedEquipDropBossInfo1) then "RedEquip 1" when n.Id in (select Id from t_RedEquipDropBossInfo2) then "RedEquip 2" when n.Id in (select Id from t_RedEquipDropBossInfo3) then "RedEquip 3" when n.Id in (select Id from t_RareGlobalDropBossInfo1) then "RareGlobal 1" else "无" end, n.SpecDropItemNormalId, d.CommonDropIndex1, d.CommonDropIndex2, d.CommonDropIndex3, d.CommonDropIndex4, d.CommonDropIndex5, d.CommonDropIndex6, d.CommonDropIndex7, d.CommonDropIndex8, d.CommonDropIndex9, d.CommonDropIndex10, d.CommonDropIndex11, d.CommonDropIndex12, d.CommonDropIndex13, d.CommonDropIndex14, d.CommonDropIndex15, d.CommonDropIndex16 from NpcAttr as n join DropList as d on n.SpecDropItemNormalId == d.Id;
insert into t_NpcAttrSpecDrop (Id, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, n.Name, n.Level, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, case when n.Id in (select Id from t_RedEquipDropBossInfo1) then "RedEquip 1" when n.Id in (select Id from t_RedEquipDropBossInfo2) then "RedEquip 2" when n.Id in (select Id from t_RedEquipDropBossInfo3) then "RedEquip 3" when n.Id in (select Id from t_RareGlobalDropBossInfo1) then "RareGlobal 1" else "无" end, n.SpecDropItemNormalId, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 from NpcAttr as n where not exists(select * from t_NpcAttrSpecDrop where n.Id == t_NpcAttrSpecDrop.Id);

drop table if exists t_NpcAttrSpecDropReset;
create table t_NpcAttrSpecDropReset(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_NpcAttrSpecDropReset (Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, "Id是NPCId, 普通红装或全服稀有掉落", n.Name, n.NpcLevel, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, c.Desc, n.REORRG, n.DropListId, n.RecursionDropId1, n.RecursionDropId2, n.RecursionDropId3, n.RecursionDropId4, n.RecursionDropId5, n.RecursionDropId6, n.RecursionDropId7, n.RecursionDropId8, n.RecursionDropId9, n.RecursionDropId10, n.RecursionDropId11, n.RecursionDropId12, n.RecursionDropId13, n.RecursionDropId14, n.RecursionDropId15, n.RecursionDropId16 from t_NpcAttrSpecDrop as n join CountResetInfo as c on n.DropResetCountId == c.Id;
insert into t_NpcAttrSpecDropReset (Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) select n.Id, "Id是NPCId, 普通红装或全服稀有掉落", n.Name, n.NpcLevel, n.DropQingYi, n.DropMentorTeachingId, n.IsRecordDropLog, n.DropResetCountId, "无", n.REORRG, n.DropListId, n.RecursionDropId1, n.RecursionDropId2, n.RecursionDropId3, n.RecursionDropId4, n.RecursionDropId5, n.RecursionDropId6, n.RecursionDropId7, n.RecursionDropId8, n.RecursionDropId9, n.RecursionDropId10, n.RecursionDropId11, n.RecursionDropId12, n.RecursionDropId13, n.RecursionDropId14, n.RecursionDropId15, n.RecursionDropId16 from t_NpcAttrSpecDrop as n where not exists(select * from t_NpcAttrSpecDropReset where n.Id == t_NpcAttrSpecDropReset.Id);

drop table if exists t_NpcAttrSpecDropResetFinal;
create table t_NpcAttrSpecDropResetFinal(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_NpcAttrSpecDropResetFinal select * from t_NpcAttrSpecDropReset order by t_NpcAttrSpecDropReset.Id;

drop table if exists t_ResultMid;
create table t_ResultMid(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, 
                      RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, 
					  RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_ResultMid(Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, 
                     RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, 
					 RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) 
                     select nadrf.Id, nadrf.Description, nadrf.Name, nadrf.NpcLevel, nadrf.DropQingYi, nadrf.DropMentorTeachingId, nadrf.IsRecordDropLog, nadrf.DropResetCountId, nadrf.DropResetName, nadrf.REORRG, nadrf.DropListId, 
                     nadrf.RecursionDropId1, nadrf.RecursionDropId2, nadrf.RecursionDropId3, nadrf.RecursionDropId4, nadrf.RecursionDropId5, nadrf.RecursionDropId6, nadrf.RecursionDropId7, nadrf.RecursionDropId8, 
					 nadrf.RecursionDropId9, nadrf.RecursionDropId10, nadrf.RecursionDropId11, nadrf.RecursionDropId12, nadrf.RecursionDropId13, nadrf.RecursionDropId14, nadrf.RecursionDropId15, nadrf.RecursionDropId16
					 from t_NpcAttrDropResetFinal as nadrf join t_param as p on (nadrf.RecursionDropId1 == p.Id or nadrf.RecursionDropId2 == p.Id or nadrf.RecursionDropId3 == p.Id or nadrf.RecursionDropId4 == p.Id or nadrf.RecursionDropId5 == p.Id or nadrf.RecursionDropId6 == p.Id or 
					                                                             nadrf.RecursionDropId7 == p.Id or nadrf.RecursionDropId8 == p.Id or nadrf.RecursionDropId9 == p.Id or nadrf.RecursionDropId10 == p.Id or nadrf.RecursionDropId11 == p.Id or nadrf.RecursionDropId12 == p.Id or
																				 nadrf.RecursionDropId13 == p.Id or nadrf.RecursionDropId14 == p.Id or nadrf.RecursionDropId15 == p.Id or nadrf.RecursionDropId16 == p.Id);
insert into t_ResultMid(Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, 
                     RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, 
					 RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) 
                     select nasdrf.Id, nasdrf.Description, nasdrf.Name, nasdrf.NpcLevel, nasdrf.DropQingYi, nasdrf.DropMentorTeachingId, nasdrf.IsRecordDropLog, nasdrf.DropResetCountId, nasdrf.DropResetName, nasdrf.REORRG, nasdrf.DropListId, 
                     nasdrf.RecursionDropId1, nasdrf.RecursionDropId2, nasdrf.RecursionDropId3, nasdrf.RecursionDropId4, nasdrf.RecursionDropId5, nasdrf.RecursionDropId6, nasdrf.RecursionDropId7, nasdrf.RecursionDropId8, 
					 nasdrf.RecursionDropId9, nasdrf.RecursionDropId10, nasdrf.RecursionDropId11, nasdrf.RecursionDropId12, nasdrf.RecursionDropId13, nasdrf.RecursionDropId14, nasdrf.RecursionDropId15, nasdrf.RecursionDropId16
					 from t_NpcAttrSpecDropResetFinal as nasdrf join t_param as p on (nasdrf.RecursionDropId1 == p.Id or nasdrf.RecursionDropId2 == p.Id or nasdrf.RecursionDropId3 == p.Id or nasdrf.RecursionDropId4 == p.Id or nasdrf.RecursionDropId5 == p.Id or nasdrf.RecursionDropId6 == p.Id or 
					                                                                  nasdrf.RecursionDropId7 == p.Id or nasdrf.RecursionDropId8 == p.Id or nasdrf.RecursionDropId9 == p.Id or nasdrf.RecursionDropId10 == p.Id or nasdrf.RecursionDropId11 == p.Id or nasdrf.RecursionDropId12 == p.Id or
																					  nasdrf.RecursionDropId13 == p.Id or nasdrf.RecursionDropId14 == p.Id or nasdrf.RecursionDropId15 == p.Id or nasdrf.RecursionDropId16 == p.Id);
drop table if exists t_ResultDistinct;
create table t_ResultDistinct(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, 
                      RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, 
					  RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_ResultDistinct(Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, 
                     RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, 
					 RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) 
                     select distinct * from t_ResultMid;
drop table if exists t_Result;
create table t_Result(Id integer, Description text, Name text, NpcLevel integer, DropQingYi integer, DropMentorTeachingId integer, IsRecordDropLog integer, DropResetCountId integer, DropResetName text, REORRG text, DropListId integer, 
                      RecursionDropId1 integer, RecursionDropId2 integer, RecursionDropId3 integer, RecursionDropId4 integer, RecursionDropId5 integer, RecursionDropId6 integer, RecursionDropId7 integer, RecursionDropId8 integer, 
					  RecursionDropId9 integer, RecursionDropId10 integer, RecursionDropId11 integer, RecursionDropId12 integer, RecursionDropId13 integer, RecursionDropId14 integer, RecursionDropId15 integer, RecursionDropId16 integer);
insert into t_Result(Id, Description, Name, NpcLevel, DropQingYi, DropMentorTeachingId, IsRecordDropLog, DropResetCountId, DropResetName, REORRG, DropListId, 
                     RecursionDropId1, RecursionDropId2, RecursionDropId3, RecursionDropId4, RecursionDropId5, RecursionDropId6, RecursionDropId7, RecursionDropId8, 
					 RecursionDropId9, RecursionDropId10, RecursionDropId11, RecursionDropId12, RecursionDropId13, RecursionDropId14, RecursionDropId15, RecursionDropId16) 
                     select * from t_ResultDistinct;
					 
