<?xml version="1.0" encoding="utf-8" ?>
<plist>
  <!--Inner descript ${N} =\n ${L} =< ${R} = '>'-->
  
  <descript>//Auto Created by Robot, Don't try to Modify</descript>
  
  <import>

    using System;${N}
    using System.Collections.Generic;${N}
    using System.Collections;${N}
    using UnityEngine;${N}
    using System.IO;${N}
  </import>
  
  <namespace>namespace  ILHotfix{ </namespace>
  <classhead> 
    public  delegate void SerializableTable${L}T${R}(string[] valuesList, int key, Dictionary${L}int, T${R} hash);${N}
    //[Serializable]${N}
    public partial class TableManager${N}
    {${N}
    private static string GetWinPathTail()${N}
    {${N}
    #if UNITY_STANDALONE_WIN${N}
    #if UNITY_EDITOR${N}
    return "/Editor";${N}
    #elif PCBUILD${N}
    return "";${N}
    #elif PCTYBUILD${N}
    return "/TY";${N}
    #elif PCTESTBUILD${N}
    return "/Test";${N}
    #endif${N}
    #endif${N}
	#if (UNITY_IPHONE || UNITY_ANDROID) &amp;&amp; !UNITY_EDITOR${N}
    return "/" + PlayerPrefs.GetString("keyCurrentLanguage", "EN").ToLower();${N}              
    #endif${N} 
    return "";${N}
    } ${N}
    static List${L}string${R} _allDataRow = new List${L}string${R}();${N} 
    public  const string TableDataFullPath = "Assets/Game/Bundle/Table/Tab_{0}_Data.asset";${N}
	public  const string TableDataShortPath = "Tab_{0}_Data";${N}  
	public static byte[] GetTableBytesSync(string path)
    {${N}
		BinaryAsset binaryAsset =  AssetManager.LoadTableSync(path);${N}
		if (binaryAsset != null)${N}
		{${N}
			return binaryAsset.binaryBytes;${N}
		}${N}
		Debug.LogError($"Load File {path} Fail!!! No Data File!");${N}
		return null;${N} 
    }${N}  
    public static bool ReaderPList${L}T${R}(String xmlFile, SerializableTable${L}T${R} func, Dictionary${L}int, T${R} hash)${N}
    {${N}
		_allDataRow.Clear();${N}
		string tablePath = $"{Application.dataPath}/Game/Table/{xmlFile}.txt";${N}
		if (File.Exists(tablePath))${N}
		{${N}
			Stream ss = File.Open(tablePath, FileMode.Open);${N}
			using (StreamReader sr = new StreamReader(ss))${N}
			{${N}
				string tempLine = sr.ReadLine();${N}
				while (tempLine != null)${N}
				{${N}
					_allDataRow.Add(tempLine);${N}
					tempLine = sr.ReadLine();${N}
				}${N}
				sr.Dispose();${N}
				sr.Close();${N}
			}${N}
			ss.Dispose();${N}
			ss.Close();${N}  
		}${N} 
		#region InitTable${N}
		int skip = 0;${N}
		string[] typeList = null;${N}
		string[] bIgnore = null;${N}
		int ignoreCount = 0;${N}
		string[] strCol = null;${N}
		string[] valuesList = null;${N}
		int nKey = -1;${N}
		int lastKey = int.MinValue;${N}
		for (int idx = 0; idx ${L} _allDataRow.Count; ++idx)${N}
		{${N}
			string tempLine = _allDataRow[idx].TrimEnd('\r');${N}
			if (skip == 1)${N}
			{
				typeList = tempLine.Split('\t');${N}
				++skip;${N}
				continue;${N}
			}${N}
			else if (skip == 2)${N}
			{${N}
				bIgnore = tempLine.Split('\t');${N}
				for (int idy = 0; idy ${L} bIgnore.Length; ++idy)${N}
				{${N}
					if (bIgnore[idy] == "N") ++ignoreCount;${N}
				}${N}
			}${N}
			if (++skip ${L} 4) continue;${N}
			if (String.IsNullOrEmpty(tempLine)) continue;${N}
			if (tempLine[0] == '#') continue;${N}
			strCol = tempLine.Split('\t');${N}
			if (strCol.Length == 0)${N}
			{${N}
				Debug.LogError($"Table: {tablePath} Line: {idx} IsNullOrEmpty, Please check again!!!");${N}
				continue;${N}
			}${N}
			if (!Int32.TryParse(strCol[0], out nKey))${N}
			{${N}
				nKey = lastKey;${N}
			}${N}
			if (valuesList == null)${N}
			{${N}
				valuesList = new string[strCol.Length - ignoreCount];${N}
			}${N}
			int nIndex = 0;${N}
			for (int idy = 0; idy ${L} strCol.Length; ++idy)${N}
			{${N}
				if (idy ${L} bIgnore.Length &amp;&amp; !String.IsNullOrEmpty(bIgnore[idy]) &amp;&amp; bIgnore[idy] == "N") continue;${N}
				if (string.IsNullOrEmpty(strCol[idy]) &amp;&amp; "STRING" != typeList[idy].ToUpper())${N}
				{${N}
					valuesList[nIndex++] = idy == 0 ? nKey.ToString() : "0";${N}
				}${N}
				else${N}
				{${N}
					valuesList[nIndex++] = strCol[idy];${N}
				}${N}
			}${N}
			func(valuesList, nKey, hash);${N}
			lastKey = nKey;${N}
		}${N}
		#endregion${N}
		_allDataRow.Clear();${N}
		return true;${N}
    }${N}
    public static int ConvertToInt32(string value)${N}
    {${N}
    if (value.Length ${R}= 1)${N}
    {${N}
    if (value[0] == '*')${N}
    {${N}
    string temp_string = value.Substring(1);${N}
    return Convert.ToInt32(temp_string);${N}
    }${N}
    }${N}
    return Convert.ToInt32(value);${N}
    }${N}
    public static long ConvertToInt64(string value)${N}
    {${N}
    if (value.Length ${R}= 1)${N}
    {${N}
    if (value[0] == '*')${N}
    {${N}
    string temp_string = value.Substring(1);${N}
    return Convert.ToInt64(temp_string);${N}
    }${N}
    }${N}
    return Convert.ToInt64(value);${N}
    }${N}
    public static float ConvertToSingle(string value)${N}
    {${N}
    if (value.Length ${R}= 1)${N}
    {${N}
    if (value[0] == '*')${N}
    {${N}
    string temp_string = value.Substring(1);${N}
    return Convert.ToSingle(temp_string);${N}
    }${N}
    }${N}
    return Convert.ToSingle(value);${N}
    }${N}
  </classhead>

  <!--This below is Body-->
  <managerdata>
    private static Dictionary${L}int, Table_${CodeName}${R} g_${CodeName} = null;${N}
    ${N} public static bool InitTable_${CodeName}(bool bLoadTable = true, bool createDatFile = false)${N}
    {${N}
    if(bLoadTable == false)${N}
    {${N}
    g_${CodeName} = null;${N}
    return true;${N}
    }${N}
    return Table_${CodeName}.LoadTable(ref g_${CodeName},createDatFile);${N}
    }${N}
	
	public static string GetTableContent_${CodeName}(byte[] bytes)${N}
	{${N}
       return Table_${CodeName}.GetTableContent(ref g_${CodeName}, bytes);${N}
	}${N}
  </managerdata>

  <initsingle>
    InitTable_${CodeName}(bLoadTable,createDatFile);${N}
  </initsingle>
  
  <inittable>
    public static void InitTable(bool bLoadTable = true, bool createDatFile = false)${N}
    {${N}
    ${FULLINIT}${N}


    if (createDatFile)${N}
    {${N}
    Utils.SaveTableBinaryAssets();${N}
    }${N}
	
    }${N}
  </inittable>

  <manageropt>
    #if ${CodeName}LimitDate${N}
    private static Table_${CodeName}  _Get${CodeName}ByID(int nKey, int nIndex = 0)${N}
    #else${N}
    public static Table_${CodeName}  Get${CodeName}ByID(int nKey, int nIndex = 0)${N}
    #endif${N}
    {${N}
    if(g_${CodeName}==null)${N}
    {${N}
    InitTable_${CodeName}();${N}
    }${N}
    if( g_${CodeName}.ContainsKey(nKey))${N}
    {${N}
    return g_${CodeName}[nKey];${N}
    }${N}
    return null;${N}
    }${N}

    #if ${CodeName}LimitDate${N}
    private static Dictionary${L}int, Table_${CodeName}${R}  _Get${CodeName}()${N}
    #else${N}
    public static Dictionary${L}int, Table_${CodeName}${R}  Get${CodeName}()${N}
    #endif${N}
    {${N}
    if(g_${CodeName}==null)${N}
    {${N}
    InitTable_${CodeName}();${N}
    }${N}
    return g_${CodeName};${N}
    }${N}
  </manageropt>

  <tail>${N}}${N}}${N}</tail>
  </plist>
  